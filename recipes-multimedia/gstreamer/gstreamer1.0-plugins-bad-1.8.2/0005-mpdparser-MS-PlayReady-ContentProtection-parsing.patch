diff -ur gst1-plugins-bad-1.8.2/ext/dash/gstdashdemux.c gst1-plugins-bad-1.8.2.patched/ext/dash/gstdashdemux.c
--- gst1-plugins-bad-1.8.2/ext/dash/gstdashdemux.c	2016-03-24 12:36:40.000000000 +0100
+++ gst1-plugins-bad-1.8.2.patched/ext/dash/gstdashdemux.c	2016-11-08 15:51:38.531995526 +0100
@@ -653,7 +653,7 @@
   /* RFC 2141 states: The leading "urn:" sequence is case-insensitive */
   schemeIdUri = g_ascii_strdown (cp->schemeIdUri, -1);
   if (g_str_has_prefix (schemeIdUri, "urn:uuid:")) {
-    pssi_len = strlen (cp->value);
+    pssi_len = cp->value_len;
     pssi = gst_buffer_new_wrapped (g_memdup (cp->value, pssi_len), pssi_len);
     GST_LOG_OBJECT (stream, "Queuing Protection event on source pad");
     /* RFC 4122 states that the hex part of a UUID is in lower case,
diff -ur gst1-plugins-bad-1.8.2/ext/dash/gstmpdparser.c gst1-plugins-bad-1.8.2.patched/ext/dash/gstmpdparser.c
--- gst1-plugins-bad-1.8.2/ext/dash/gstmpdparser.c	2016-03-24 12:36:40.000000000 +0100
+++ gst1-plugins-bad-1.8.2.patched/ext/dash/gstmpdparser.c	2016-11-08 15:48:22.421060654 +0100
@@ -1298,6 +1298,7 @@
     /* if no value attribute, use XML string representation of the node */
     gst_mpdparser_get_xml_node_as_string (a_node, &new_descriptor->value);
   }
+  new_descriptor->value_len = strlen(new_descriptor->value);
 }
 
 static void
@@ -1717,6 +1718,44 @@
 }
 
 static void
+gst_mpdparser_parse_content_protection_node (GList ** list, xmlNode * a_node)
+{
+  gchar *value = NULL;
+  if (gst_mpdparser_get_xml_prop_string (a_node, "value", &value)) {
+    if (!g_strcmp0 (value, "MSPR 2.0")) {
+      xmlNode *cur_node;
+      for (cur_node = a_node->children; cur_node; cur_node = cur_node->next) {
+        if (cur_node->type == XML_ELEMENT_NODE) {
+          if (xmlStrcmp (cur_node->name, (xmlChar *) "pro") == 0) {
+            gsize decoded_len;
+            GstDescriptorType *new_descriptor;
+            new_descriptor = g_slice_new0 (GstDescriptorType);
+            *list = g_list_append (*list, new_descriptor);
+
+            gst_mpdparser_get_xml_prop_string (a_node, "schemeIdUri",
+                &new_descriptor->schemeIdUri);
+
+            gst_mpdparser_get_xml_node_content (cur_node,
+                &new_descriptor->value);
+            g_base64_decode_inplace (new_descriptor->value, &decoded_len);
+            *(new_descriptor->value + decoded_len) = '\0';
+            new_descriptor->value_len = decoded_len;
+            goto beach;
+          }
+        }
+      }
+    } else {
+      gst_mpdparser_parse_descriptor_type_node (list, a_node);
+    }
+  } else {
+    gst_mpdparser_parse_descriptor_type_node (list, a_node);
+  }
+beach:
+  if (value)
+    g_free (value);
+}
+
+static void
 gst_mpdparser_parse_representation_base_type (GstRepresentationBaseType **
     pointer, xmlNode * a_node)
 {
@@ -1771,7 +1810,7 @@
             (&representation_base->AudioChannelConfiguration, cur_node);
       } else if (xmlStrcmp (cur_node->name,
               (xmlChar *) "ContentProtection") == 0) {
-        gst_mpdparser_parse_descriptor_type_node
+        gst_mpdparser_parse_content_protection_node
             (&representation_base->ContentProtection, cur_node);
       }
     }
diff -ur gst1-plugins-bad-1.8.2/ext/dash/gstmpdparser.h gst1-plugins-bad-1.8.2.patched/ext/dash/gstmpdparser.h
--- gst1-plugins-bad-1.8.2/ext/dash/gstmpdparser.h	2016-03-24 12:36:40.000000000 +0100
+++ gst1-plugins-bad-1.8.2.patched/ext/dash/gstmpdparser.h	2016-11-08 15:37:25.471233147 +0100
@@ -277,6 +277,7 @@
 {
   gchar *schemeIdUri;
   gchar *value;
+  glong value_len;
 };
 
 struct _GstContentComponentNode
